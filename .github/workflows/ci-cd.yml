name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10'
  DOCKER_REGISTRY: 'your-registry.azurecr.io'

jobs:
  # Code Formatting and Linting
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --cache-dir ~/.cache/pip -r requirements.txt
        pip install --cache-dir ~/.cache/pip types-psycopg2
        pip install --cache-dir ~/.cache/pip safety
    
    - name: Format code with Black
      run: |
        echo "Black version: $(black --version)"
        black --line-length=79 python_service/ graphql_api/ db_migration/ observability/ tests/
    
    - name: Sort imports with isort
      run: |
        isort python_service/ graphql_api/ db_migration/ observability/ tests/
    
    - name: Fix PEP 8 issues with autopep8
      run: |
        find python_service/ graphql_api/ db_migration/ observability/ tests/ -name "*.py" -exec autopep8 --in-place --aggressive --aggressive --max-line-length=79 {} \;
    
    - name: Check for formatting changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "Code formatting changes detected. Please run the formatting tools locally and commit changes."
          git diff
          exit 1
        fi
    
    - name: Run linting checks
      env:
        SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
      run: |
        echo "Running flake8..."
        flake8 python_service/ graphql_api/ db_migration/ observability/ tests/ --max-line-length=79 --count --extend-ignore=E203
        
        echo "Checking Black formatting..."
        echo "Black version: $(black --version)"
        black --check --line-length=79 python_service/ graphql_api/ db_migration/ observability/ tests/
        
        echo "Checking import sorting..."
        isort --check-only python_service/ graphql_api/ db_migration/ observability/ tests/
        
        echo "Running type checking..."
        mypy python_service/ graphql_api/ db_migration/ observability/
        
        echo "Running security scan..."
        bandit -r python_service/ graphql_api/ db_migration/ observability/
        
                echo "Checking dependency vulnerabilities..."
        
    - name: Run Safety CLI to check for vulnerabilities
      uses: pyupio/safety-action@v1
      with:
        api-key: ${{ secrets.SAFETY_API_KEY }}
        args: --detailed-output
        
    # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    needs: [lint]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finance_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      timescaledb:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finance_timescale
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=python_service --cov=graphql_api --cov=db_migration --cov=observability
        pytest tests/ --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run security scan
      run: |
        bandit -r python_service/ graphql_api/ db_migration/ observability/

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build and test Docker images
      run: |
        docker compose build
        docker compose up -d
        sleep 30  # Wait for services to start
        docker compose ps
        docker compose logs
    
    - name: Test Docker services
      run: |
        # Test FastAPI service
        curl -f http://localhost:8000/transactions || exit 1
        curl -f http://localhost:8000/investments || exit 1
        
        # Test GraphQL service
        curl -f -X POST http://localhost:8002/graphql \
          -H "Content-Type: application/json" \
          -d '{"query": "{ transactions { id amount category date } }"}' || exit 1
        
        # Test observability
        curl -f http://localhost:8001/metrics || exit 1

  # Database Migration Test
  migration-test:
    runs-on: ubuntu-latest
    needs: [test]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finance_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      timescaledb:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finance_timescale
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test database migration
      run: |
        python db_migration/migrate.py
        echo "Migration test completed successfully"

  # Performance Testing
  performance:
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install performance testing tools
      run: |
        pip install locust
    
    - name: Start services for performance testing
      run: |
        docker compose up -d
        sleep 30
    
    - name: Run performance tests
      run: |
        # Test FastAPI service (port 8000)
        locust -f performance_tests/locustfile.py --host=http://localhost:8000 --users=5 --spawn-rate=1 --run-time=30s --headless || echo "FastAPI performance test completed"
        
        # Test GraphQL service (port 8002) 
        locust -f performance_tests/graphql_locustfile.py --host=http://localhost:8002 --users=5 --spawn-rate=1 --run-time=30s --headless || echo "GraphQL performance test completed"

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker-build, migration-test, performance]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker images
      run: |
        docker compose build
        docker tag personal-finance-analytics-platform-modernization-fastapi:latest ghcr.io/${{ github.actor }}/fastapi:latest
        docker tag personal-finance-analytics-platform-modernization-graphql:latest ghcr.io/${{ github.actor }}/graphql:latest
        docker tag personal-finance-analytics-platform-modernization-observability:latest ghcr.io/${{ github.actor }}/observability:latest
        docker push ghcr.io/${{ github.actor }}/fastapi:latest
        docker push ghcr.io/${{ github.actor }}/graphql:latest
        docker push ghcr.io/${{ github.actor }}/observability:latest
    
    - name: Health check deployment
      run: |
        echo "Docker images pushed to GitHub Container Registry successfully"
        echo "Images available at:"
        echo "- ghcr.io/${{ github.actor }}/fastapi:latest"
        echo "- ghcr.io/${{ github.actor }}/graphql:latest"
        echo "- ghcr.io/${{ github.actor }}/observability:latest"

  # Notifications
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
    - name: Notify on success
      if: needs.deploy.result == 'success'
      run: |
        echo "CI/CD Pipeline completed successfully! 🎉"
        echo "All tests passed: linting, security, testing, performance"
        echo "Docker images deployed to GitHub Container Registry"
        # Add Slack/Teams notification here
    
    - name: Notify on failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "CI/CD Pipeline failed! ❌"
        echo "Check the logs for details"
        # Add Slack/Teams notification here 