name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'
  DOCKER_REGISTRY: 'your-registry.azurecr.io'

jobs:
  # Code Formatting and Linting
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Format code with Black
      run: |
        black --line-length=79 python_service/ graphql_api/ db_migration/ observability/ tests/
    
    - name: Sort imports with isort
      run: |
        isort python_service/ graphql_api/ db_migration/ observability/ tests/
    
    - name: Fix PEP 8 issues with autopep8
      run: |
        find python_service/ graphql_api/ db_migration/ observability/ tests/ -name "*.py" -exec autopep8 --in-place --aggressive --aggressive --max-line-length=79 {} \;
    
    - name: Check for formatting changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "Code formatting changes detected. Please run the formatting tools locally and commit changes."
          git diff
          exit 1
        fi
    
    - name: Run linting checks
      run: |
        echo "Running flake8..."
        flake8 python_service/ graphql_api/ db_migration/ observability/ tests/ --max-line-length=79 --count
        
        echo "Checking Black formatting..."
        black --check --line-length=79 python_service/ graphql_api/ db_migration/ observability/ tests/
        
        echo "Checking import sorting..."
        isort --check-only python_service/ graphql_api/ db_migration/ observability/ tests/
        
        echo "Running type checking..."
        mypy python_service/ graphql_api/ db_migration/ observability/
        
        echo "Running security scan..."
        bandit -r python_service/ graphql_api/ db_migration/ observability/
        
        echo "Checking dependency vulnerabilities..."
        safety check

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    needs: [lint]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finance_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      timescaledb:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finance_timescale
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=python_service --cov=graphql_api --cov=db_migration --cov=observability
        pytest tests/ --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run security scan
      run: |
        bandit -r python_service/ graphql_api/ db_migration/ observability/
        safety check

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build and test Docker images
      run: |
        docker-compose build
        docker-compose up -d
        sleep 30  # Wait for services to start
        docker-compose ps
        docker-compose logs
    
    - name: Test Docker services
      run: |
        # Test FastAPI service
        curl -f http://localhost:8000/transactions || exit 1
        curl -f http://localhost:8000/investments || exit 1
        
        # Test GraphQL service
        curl -f -X POST http://localhost:8002/graphql \
          -H "Content-Type: application/json" \
          -d '{"query": "{ transactions { id amount category date } }"}' || exit 1
        
        # Test observability
        curl -f http://localhost:8001/metrics || exit 1

  # Database Migration Test
  migration-test:
    runs-on: ubuntu-latest
    needs: [test]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finance_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      timescaledb:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finance_timescale
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test database migration
      run: |
        python db_migration/migrate.py
        echo "Migration test completed successfully"

  # Performance Testing
  performance:
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install performance testing tools
      run: |
        pip install locust
    
    - name: Start services for performance testing
      run: |
        docker-compose up -d
        sleep 30
    
    - name: Run performance tests
      run: |
        locust -f performance_tests/locustfile.py --host=http://localhost:8000 --users=10 --spawn-rate=2 --run-time=60s --headless

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker-build, migration-test, performance]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push Docker images
      run: |
        docker-compose build
        docker tag personal-finance-analytics-platform-modernization-fastapi:latest ${{ env.DOCKER_REGISTRY }}/fastapi:latest
        docker tag personal-finance-analytics-platform-modernization-graphql:latest ${{ env.DOCKER_REGISTRY }}/graphql:latest
        docker tag personal-finance-analytics-platform-modernization-observability:latest ${{ env.DOCKER_REGISTRY }}/observability:latest
        docker push ${{ env.DOCKER_REGISTRY }}/fastapi:latest
        docker push ${{ env.DOCKER_REGISTRY }}/graphql:latest
        docker push ${{ env.DOCKER_REGISTRY }}/observability:latest
    
    - name: Deploy to Kubernetes
      run: |
        # Apply Kubernetes manifests
        kubectl apply -f k8s/
        kubectl rollout status deployment/fastapi-deployment
        kubectl rollout status deployment/graphql-deployment
        kubectl rollout status deployment/observability-deployment
    
    - name: Health check deployment
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=fastapi --timeout=300s
        kubectl wait --for=condition=ready pod -l app=graphql --timeout=300s
        kubectl wait --for=condition=ready pod -l app=observability --timeout=300s
        
        # Test endpoints
        kubectl port-forward svc/fastapi-service 8000:8000 &
        kubectl port-forward svc/graphql-service 8002:8002 &
        kubectl port-forward svc/observability-service 8001:8001 &
        
        sleep 10
        
        curl -f http://localhost:8000/transactions || exit 1
        curl -f -X POST http://localhost:8002/graphql -H "Content-Type: application/json" -d '{"query": "{ transactions { id } }"}' || exit 1
        curl -f http://localhost:8001/metrics || exit 1

  # Notifications
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
    - name: Notify on success
      if: needs.deploy.result == 'success'
      run: |
        echo "Deployment successful! üéâ"
        # Add Slack/Teams notification here
    
    - name: Notify on failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "Deployment failed! ‚ùå"
        # Add Slack/Teams notification here 